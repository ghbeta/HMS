# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                                                controllers.Application.index()
GET         /dashboard                                                       controllers.Dashboard.index()
#System Admin
GET         /dashboard/admin                                                 controllers.Dashboard.admindashboard()
GET         /usermanage/admin                                                controllers.system.SystemControll.usermanagementinit()
GET         /databasemanage/admin                                            controllers.system.SystemControll.databasemanagementinit()
POST        /databasemanage/admin                                            controllers.system.SystemControll.databasemanagement()
POST        /usermanage/admin                                                controllers.system.SystemControll.usermanagement()
POST        /usermanage/changerole/admin                                     controllers.system.SystemControll.changeuserrole()
POST        /login                                                           controllers.Application.authenticate()
GET         /logout                                                          controllers.Application.logout()

GET         /settings                                                        controllers.account.settings.Index.index()
GET         /settings/password                                               controllers.account.settings.Password.index()
POST        /settings/password                                               controllers.account.settings.Password.runPassword()
GET         /settings/email                                                  controllers.account.settings.Email.index()
POST        /settings/email                                                  controllers.account.settings.Email.runEmail()
POST        /settings/ssh                                                    controllers.account.settings.ModifySSH.addssh()
POST        /settings/ssh_delete                                             controllers.account.settings.ModifySSH.deletessh(sshid:String)
# Registers the user, sending an email to confirm the account.
GET         /signup                                                          controllers.account.Signup.create()
POST        /signup                                                          controllers.account.Signup.save()

# Accessed when the user confirms the registration.
GET         /confirm/:confirmToken                                           controllers.account.Signup.confirm(confirmToken:String)

# Displays a page to send a reset email given the user's email.
GET         /reset/ask                                                       controllers.account.Reset.ask()
POST        /reset/ask                                                       controllers.account.Reset.runAsk()

# Resets the password using the password.
GET         /reset/:token                                                    controllers.account.Reset.reset(token:String)
POST        /reset/:token                                                    controllers.account.Reset.runReset(token:String)

GET         /email/:token                                                    controllers.account.settings.Email.validateEmail(token:String)

# Get all the Lectures related to the current user.
GET         /all                                                             controllers.lectures.Lecturehub.allLectures()
# Get all my Lectures
GET         /mylecture                                                       controllers.lectures.Lecturehub.myLectures()
#Create Lecture page for the user roll teacher
GET         /createlecture                                                   controllers.lectures.admin.Createlecture.createlectureform()
POST        /createlecture                                                   controllers.lectures.admin.Createlecture.createlecture()
#Generate Lecture home page for teacher or assistance
GET         /admin/:user/:semester/:lecture                                  controllers.lectures.admin.Lecturehome.generatelecturehome(user:String,semester:String,lecture:String)
GET         /admin/:user/:semester/:lecture/add                              controllers.lectures.admin.Lecturehome.addSemesterusertoLecture(user:String,semester:String,lecture:String)
GET         /admin/:user/:semester/:lecture/delete                           controllers.lectures.admin.Lecturehome.deleteSemesteruserfromlecture(user:String,semester:String,lecture:String)
#Generate lecture home page for students
GET         /students/:user/:semester/:lecture                               controllers.lectures.user.Lecturehome.generatelecturehome(user:String,semester:String,lecture:String)
GET         /students/:user/:semester/:lecture/delete                        controllers.lectures.user.Lecturehome.deleteSemesteruserfromlecture(user:String,semester:String,lecture:String)
GET         /students/:user/:semester/:lecture/add                           controllers.lectures.user.Lecturehome.addSemesterusertoLecture(user:String,semester:String,lecture:String)
#Generate Lecture remote repo for students afterwards(after entering lecture)
POST        /students/:user/:semester/:lecture/addrepo                       controllers.lectures.user.Lecturehome.addRemoteRepotoLecture(user:String,semester:String,lecture:String)
#Modify the Lecture content description(Teacher)
POST        /admin/:user/:semester/:lecture/description                      controllers.lectures.admin.Lecturehome.modifydescription(user:String,semester:String,lecture:String)
#Modify the Lecture content terms(Teacher)
POST        /admin/:user/:semester/:lecture/terms                            controllers.lectures.admin.Lecturehome.modifyterms(user:String,semester:String,lecture:String)
#Add assignment to lecture(Teacher)
POST        /admin/:user/:semester/:lecture/add_assignment                   controllers.lectures.admin.Lecturehome.addassignment(user:String,semester:String,lecture:String)
#Modify assignment in lecture(Teacher)
POST        /admin/:semester/:lecture/mod_assignment                         controllers.lectures.admin.Lecturehome.modifyassignment(assignmentid:String,semester:String,lecture:String)
GET         /admin/:semester/:lecture/:assignment/delete                     controllers.lectures.admin.Lecturehome.deleteAssignment(lecture:String,assignment:String,semester:String)
#Add Evaluation to students of a assignment
POST        /admin/:semester/:lecture/:assignment/:student/evaluation        controllers.lectures.admin.Assignmentevaluation.addevaluation(semester:String,lecture:String,assignment:String,student:String)
#Generate Lecture home page for students
GET         /usr/:user/:semester/:lecture                                    controllers.lectures.user.Lecturehome.generatelecturehome(user:String,semester:String,lecture:String)
#Hand in Homework(Students)
POST        /usr/:user/:semester/:lecture/handin                             controllers.lectures.user.Lecturehome.handinhomework(assignmentid:String,user:String,semester:String,lecture:String)
GET         /usr/:user/:semester/:lecture/remote/handin                      controllers.lectures.user.Lecturehome.handinhomeworkremote(assignmentid:String,user:String,semester:String,lecture:String)
#Revert last handin homework
GET         /usr/:user/:semester/:lecture/revert                             controllers.lectures.user.Lecturehome.reverthandinhomework(assignmentid:String,user:String,semester:String,lecture:String)
GET         /usr/:user/:semester/:lecture/remote/revert                      controllers.lectures.user.Lecturehome.reverthandinhomeworkremote(assignmentid:String,user:String,semester:String,lecture:String)
#Forum routes
POST        /:semester/:lecturename/forum/newthread                          controllers.lectures.Lectureforum.createthread(user:String,semester:String,lecturename:String)
GET         /:semester/:lecturename/forum/show/:thread                       controllers.lectures.Lectureforum.getthread(semester:String,lecturename:String,thread:String)
GET         /:semester/:lecturename/forum/allthread                          controllers.lectures.Lectureforum.forumredirect(semester:String,lecturename:String)
GET         /:semester/:lecturename/forum/mythread                           controllers.lectures.Lectureforum.getmythreads(semester:String,lecturename:String)
POST        /:semester/:lecturename/forum/show/:thread/newpost               controllers.lectures.Lectureforum.createpost(semester:String,lecturename:String,thread:String)
#Message routes
POST        /:semester/:lecturename/:touser/newconversation                  controllers.messages.Messagecontrol.addConversation(semester:String,touser:String,lecturename:String)
GET         /messages                                                        controllers.messages.Messagecontrol.generateMessagehome()
GET         /messages/:semester                                              controllers.messages.Messagecontrol.semesterrequest(semester:String)
GET         /conversation/:semester/:convid                                  controllers.messages.Messagecontrol.contentreques(semester:String,convid:String)
POST         /conversation/:semester/:convid/newmessage                       controllers.messages.Messagecontrol.addmessage(semester:String,convid:String)
#About static page
GET         /about                                                           controllers.About.index()
#File service (hosted file on host server)
GET         /files/:path                                                     controllers.lectures.Lecturehub.getFiles(path:String)
#GET         /files/delete/:filename                               controllers.lectures.Lecturehub.deleteFiles(lecture:String,assignment:String,semester:String,filename:String)
# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                    controllers.Assets.at(path="/public", file)

